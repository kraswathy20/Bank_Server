Server Creation
----------------

1. create package.json file   --     npm init
2. install Express framework  --     npm i express



server side technology  -   Node (Resolves multiple request at a time)
specialities of node
1. asynchronous request handling -- Multiple request can be handled simultaniously
    there will not be delay.
2. http request(API) request will be send from the client to the server,when server receives the response,
   it is then sed to the clientas API response through server

    header                          body
    secret data                     data-json type                 | json type means--can be string or object


 Http request types
 -------------------

    GET    - READ
    POST   - CREATE
    PUT    - COMPLETE UPDATION
    PATCH  - PARTIAL UPDATION
    DELETE - REMOVE DATA

Server response  status code
----------------------------

100  - infomation pass
200  - Success
300  - redirection
400  - client error
500  - Server side error (n/w error)


Server Creation steps
----------------------

1. import express
2. create app using express
3. port number setting  --- 3000  (to run app)
4. resolve http requests

Nodemon
-------
if we are running server using node ,then recombilation(rerunning) will not work ,so we use another server 
that is Nodemon

 - npm i -g nodemon 


 nodemon index.js


 express.json()     ----  used to convert data from json into js and receive/accept the data into the server
 .json(data)        ---- convert(js to json) and send the data as response
 .status(statuscode)---- change the response status code as statuscode


Token in server
---------------

JWT TOken (json web token) - token used in server.
install 
        - npm i jsonwebtoken
-library - jsonwebtoken
-sign()  - method used to generate jwt token
-verify()- used to verify json web token

Token Verification
------------------
middlewares
------------
token verification can be done using middlewares
middlewares have the capacity to control server requests

A middlewares is a function with 3 arguments - request, response, next
There are two types of middlewares

    1. Application specific middlewares
        -works before all requests in server

    2. Router specific middlewares (will be created first and then)
        -can apply to specific request in server


how to solve runtime error in js
---------------------------------
try-except

try
    error causing code

catch
    error solution



Mongo DB  -database
--------------------

install mongobd server


shell commands
--------------

CRUD  operations

- show dbs                                - to see/view databases
- use(database_name)                      - to open a  database
- show collection                         - to see collections inside dbs
- db.(collection_name).find()             - to read all data in a collection
- db.(collection_name).findOne({acno:1000})- to read single data.
- db.(collection_name).insertOne({"acno":1000,"name":"aswathy",.......})
                                            - create new data.
- db.(collection_name).find({balance:{gt:4000}})
                                            - Find using a condition
- db.(collection_name).deleteOne({"uname":"anu"})
                                            -delete count       used to delete

- db.(collection_name).updateOne({uname:anu},{$set:{uname:anu y}})
                                            - update data




register- insertOne

login- findOne

deposit- updateOne

withdraw- updateOne

transaction-findOne

delete-deleteOne    


server Database Integration
---------------------------

database - 27017
server   - 3000

mongoose  - it is a library used to integrate server  and mdb
install   - npm i mongoose


steps
-----

1. import mongoose.
2. state a connection string to integrate.
3. define a model for our collection inside server.